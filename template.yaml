AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: album-server

Globals:
  Function:
    Timeout: 5
  Api:
    Auth:
      AddDefaultAuthorizerToCorsPreflight: false
      DefaultAuthorizer: AlbumApiAuthorizer
      Authorizers:
        AlbumApiAuthorizer:
          UserPoolArn: !Sub "arn:aws:cognito-idp:ap-northeast-1:${AWS::AccountId}:userpool/${AWS::Region}_azc25x1AV"
          AuthType: "COGNITO_USER_POOLS"
          Identity:
            Header: x-authorization
Resources:
  AlbumApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
  ListTagsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/ListTags
      Handler: listTags
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess
      Runtime: go1.x
      Tracing: Active
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /tags
            Method: GET
            RestApiId: !Ref AlbumApi
  DeleteTagsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/DeleteTags
      Handler: deleteTags
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Runtime: go1.x
      Tracing: Active
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /tags/delete
            Method: POST
            RestApiId: !Ref AlbumApi
  PostPictureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/PostPicture
      Handler: postPicture
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Runtime: go1.x
      Tracing: Active
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /pictures
            Method: POST
            RestApiId: !Ref AlbumApi
      MemorySize: 512
  ListPicturesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/ListPictures
      Handler: listPictures
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess
      Runtime: go1.x
      Tracing: Active
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /pictures
            Method: GET
            RestApiId: !Ref AlbumApi
  GetPictureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/GetPicture
      Handler: getPicture
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Runtime: go1.x
      Tracing: Active
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /pictures/{id}
            Method: GET
            RestApiId: !Ref AlbumApi
      MemorySize: 256
  PutPictureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/PutPicture
      Handler: putPicture
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Runtime: go1.x
      Tracing: Active
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /pictures/{id}
            Method: PUT
            RestApiId: !Ref AlbumApi
  DeletePictureFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: application/DeletePicture
      Handler: deletePicture
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Runtime: go1.x
      Tracing: Active
      Events:
        CatchAll:
          Type: Api
          Properties:
            Path: /pictures/{id}
            Method: Delete
            RestApiId: !Ref AlbumApi
  ListTagsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ListTagsFunction}
      RetentionInDays: 14
  DeleteTagsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeleteTagsFunction}
      RetentionInDays: 14
  PostPictureFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PostPictureFunction}
      RetentionInDays: 14
  ListPicturesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${ListPicturesFunction}
      RetentionInDays: 14
  GetPictureFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${GetPictureFunction}
      RetentionInDays: 14
  PutPictureFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${PutPictureFunction}
      RetentionInDays: 14
  DeletePictureFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${DeletePictureFunction}
      RetentionInDays: 14
  tagTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: UserName
          AttributeType: S
        - AttributeName: TagName
          AttributeType: S
      KeySchema:
        - AttributeName: UserName
          KeyType: HASH
        - AttributeName: TagName
          KeyType: RANGE
      TableName: Tag
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  taggedImageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: ID
          AttributeType: S
        - AttributeName: UserTagName
          AttributeType: S
      KeySchema:
        - AttributeName: ID
          KeyType: HASH
        - AttributeName: UserTagName
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI-UserTagName
          KeySchema:
            - AttributeName: UserTagName
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      TableName: TaggedImage
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  imageBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: album-file-bucket
      LoggingConfiguration:
        DestinationBucketName: !Ref logBucket
        LogFilePrefix: album-file-logs
  logBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: album-log
      AccessControl: LogDeliveryWrite
  hostingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Delete
    Properties:
      BucketName: album.hiramengo.com
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - HEAD
              - GET
            AllowedOrigins:
              - https://album.hiramengo.com
  hostingPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: hostingBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource:
              "Fn::Join":
                - ""
                - - "arn:aws:s3:::"
                  - Ref: hostingBucket
                  - /*
            Principal: "*"
  distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - album.hiramengo.com
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            PathPattern: /Prod/*
            TargetOriginId: API-album
            CachePolicyId: !Ref CachePolicyForAlbumApi
            ViewerProtocolPolicy: redirect-to-https
        DefaultCacheBehavior:
          TargetOriginId: S3-album
          CachePolicyId: "4135ea2d-6df8-44a3-9df3-4b5a84be39ad"
          ViewerProtocolPolicy: "redirect-to-https"
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - DomainName: !Join ["", [Ref: hostingBucket, ".s3.amazonaws.com"]]
            Id: S3-album
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
          - DomainName: !Sub "${AlbumApi}.execute-api.${AWS::Region}.amazonaws.com"
            Id: API-album
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        ViewerCertificate:
          AcmCertificateArn: arn:aws:acm:us-east-1:604249547216:certificate/8dc3bcf7-285d-48e4-86f2-8f602aa35857
          SslSupportMethod: sni-only
  CachePolicyForAlbumApi:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 1
        MaxTTL: 1
        MinTTL: 1
        Name: CachePolicyForAlbumApi
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: true
          EnableAcceptEncodingBrotli: true
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - x-authorization
          QueryStringsConfig:
            QueryStringBehavior: all
Outputs:
  ListTagsFunction:
    Description: "ListTagsFunction ARN"
    Value: !GetAtt ListTagsFunction.Arn
  ListTagsFunctionIamRole:
    Description: "Implicit IAM Role created for ListTagsFunction"
    Value: !GetAtt ListTagsFunctionRole.Arn
  DeleteTagsFunction:
    Description: "DeleteTagsFunction ARN"
    Value: !GetAtt DeleteTagsFunction.Arn
  DeleteTagsFunctionIamRole:
    Description: "Implicit IAM Role created for DeleteTagsFunction"
    Value: !GetAtt DeleteTagsFunctionRole.Arn
  PostPictureFunction:
    Description: "PostPictureFunction ARN"
    Value: !GetAtt PostPictureFunction.Arn
  PostPictureFunctionIamRole:
    Description: "Implicit IAM Role created for PostPictureFunction"
    Value: !GetAtt PostPictureFunctionRole.Arn
  ListPicturesFunction:
    Description: "ListPicturesFunction ARN"
    Value: !GetAtt ListPicturesFunction.Arn
  ListPicturesFunctionIamRole:
    Description: "Implicit IAM Role created for ListPicturesFunction"
    Value: !GetAtt ListPicturesFunctionRole.Arn
  GetPictureFunction:
    Description: "GetPictureFunction ARN"
    Value: !GetAtt GetPictureFunction.Arn
  GetPictureFunctionIamRole:
    Description: "Implicit IAM Role created for GetPictureFunction"
    Value: !GetAtt GetPictureFunctionRole.Arn
  PutPictureFunction:
    Description: "PutPictureFunction ARN"
    Value: !GetAtt PutPictureFunction.Arn
  PutPictureFunctionIamRole:
    Description: "Implicit IAM Role created for PutPictureFunction"
    Value: !GetAtt PutPictureFunctionRole.Arn
  DeletePictureFunction:
    Description: "DeletePictureFunction ARN"
    Value: !GetAtt DeletePictureFunction.Arn
  DeletePictureFunctionIamRole:
    Description: "Implicit IAM Role created for DeletePictureFunction"
    Value: !GetAtt DeletePictureFunctionRole.Arn
